using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;
using Catalog.Shared.Exceptions;
using Identity.Application.Constants;
using Identity.Application.Core.AppConfig;
using Identity.Application.Interfaces;
using Identity.Application.Responses;
using Identity.Domain;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;

namespace Identity.Infrastructure.Services.Interfaces
{
    public class TokenService : ITokenService
    {
        private readonly UserManager<User> _userManager;
        private readonly JwtSettings _jwtSettings;

        public TokenService(UserManager<User> userManager, IOptions<JwtSettings> jwtSettings)
        {
            _jwtSettings = jwtSettings.Value;
            _userManager = userManager;
        }
        
        public string GenerateAccessTokenAsync(User user, int tokenExpirationMin, bool isRefreshToken = false, string sessionId = null)
        {

            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.Email),
                new Claim(JwtRegisteredClaimNames.Sub, user.UserKey.ToString()),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                new Claim(JwtRegisteredClaimNames.GivenName, user.FirstName),
                new Claim(JwtRegisteredClaimNames.FamilyName, user.LastName),

            };

            if (isRefreshToken)
                claims.Add(new Claim(JwtClaimTypes.RefreshTokenId, sessionId));

            var symmetricSecurityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(isRefreshToken ? _jwtSettings.RefreshSecret : _jwtSettings.SecretKey));
            var signingCredentials = new SigningCredentials(symmetricSecurityKey, SecurityAlgorithms.HmacSha256);

            var jwtSecurityToken = new JwtSecurityToken(
                _jwtSettings.Issuer,
                _jwtSettings.Audience,
                claims,
                expires: DateTime.UtcNow.AddMinutes(tokenExpirationMin),
                signingCredentials: signingCredentials);
            return new JwtSecurityTokenHandler().WriteToken(jwtSecurityToken);
        }

        public Task<ClaimsPrincipal> GetPrincipalFromExpiredToken(string refreshToken)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            //Retrieve the secret key from the environment variable
            var signingKey = new SymmetricSecurityKey(Encoding.ASCII.GetBytes(_jwtSettings.RefreshSecret));
            //Validate the expired access token against the following parameters, to be sure it was actually generated by the identityService.
            var tokenValidationParameters = new TokenValidationParameters
            {
                ValidateAudience = true,
                ValidateIssuer = true,
                ValidateIssuerSigningKey = true,
                ValidateLifetime = false,
                RequireExpirationTime = false,
                ValidAudience = _jwtSettings.Audience,
                ValidIssuer = _jwtSettings.Issuer,
                IssuerSigningKey = signingKey
            };
            //Validate the expired access token and retrieve the user claims from it.
            var principal = tokenHandler.ValidateToken(refreshToken, tokenValidationParameters, out var securityToken);
            //Check if the token is a jwtSecurityToken/the Security Algorithm of the expired access token match the specified Security Algorithm.
            if (!(securityToken is JwtSecurityToken jwtSecurityToken) || !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256, StringComparison.InvariantCultureIgnoreCase))
                throw new IdentityErrorException("Invalid access token");
            return Task.FromResult(principal);
        }
         
        public async Task<AuthenticateResponse> GetAccessAndRefreshTokenAsync(User user)
        {

            var sessionId = Guid.NewGuid().ToString("N");
            var accessToken = GenerateAccessTokenAsync(user, _jwtSettings.ExpireTime);
            var refreshToken = GenerateAccessTokenAsync(user, _jwtSettings.RefreshTokenExpirationMin, true, sessionId);
            //update user refresh token and last login date
            user.RefreshToken = sessionId;
            user.LastLoginTime = DateTime.UtcNow;
            user.LastModificationTime = DateTime.UtcNow;
            var identityResult = await _userManager.UpdateAsync(user);
            if (!identityResult.Succeeded) throw new IdentityErrorException(identityResult.Errors);
            var expiryTime = (int)DateTimeOffset.UtcNow.AddMinutes(_jwtSettings.RefreshTokenExpirationMin).ToUnixTimeSeconds();
            var userInfo = new UserInfoResponse(user.FirstName, user.LastName, user.Email, user.PhoneNumber);
            return new AuthenticateResponse(refreshToken, true, accessToken, expiryTime, userInfo);
        }
    }
}

